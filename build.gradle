buildscript {
    repositories {
        maven { url "https://developer.marklogic.com/maven2/" }
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "com.marklogic:marklogic-unit-test-client:0.12.0"
    }
}

plugins {
    // This plugin allows you to create different environments
    // for your gradle deploy. Each environment is represented
    // by a gradle-${env}.properties file
    // See https://github.com/stevesaliman/gradle-properties-plugin
    // specify the env on the command line with:
    // gradle -PenvironmentName=x ...
    id 'net.saliman.properties' version '1.4.6'
    id 'com.marklogic.ml-data-hub' version '4.1.0'
    id 'com.avast.gradle.docker-compose' version "0.6.11"
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/rjrudin/maven/" }
    maven { url "https://developer.marklogic.com/maven2/" }
}

apply plugin: 'java'
apply plugin: 'idea'


configurations {
    mlcp {
        resolutionStrategy {
            force "xml-apis:xml-apis:1.4.01"
        }
    }
}

dependencies {
    mlcp "com.marklogic:mlcp:9.0.7"
    mlcp files("mlcp")
    mlRestApi "com.marklogic:marklogic-unit-test-modules:0.12.0"

    testCompile "com.marklogic:marklogic-unit-test-client:0.12.0"
}

group "nl.abnamro"
version "0.1.0"

def composeFile = "${dockerComposeFile}";

dockerCompose {
    useComposeFiles = [ composeFile ]
    waitForTcpPorts = false
}

task mlDockerSetupNode(dependsOn:composeUp)  {
    doLast {
        sleep(5 * 1000) //ensure node is up
        exec {
            commandLine 'docker', 'exec', "${nodeName}", 'init-marklogic'
        }
    }
}


task mlDockerStart(dependsOn:composeUp)

task mlDockerStop(type:Exec) {
    commandLine "docker-compose", "-f", composeFile,  "stop"
}

task mlDockerTeardown(type: Delete, dependsOn:composeDown) {
    //remove logs directory
    delete 'logs'
}

def restSslContext = SSLContext.getInstance("TLSv1.2")
restSslContext.init(null, [new SimpleX509TrustManager()] as TrustManager[], null)
def restSslVerifier = DatabaseClientFactory.SSLHostnameVerifier.ANY

ext {
    // causes a temporary cert to be generated. This is necessary for MarkLogic
    // to allow SSL connections on your AppServer. 
    // The alternative is to create a proper signed cert
    def command = new com.marklogic.appdeployer.command.security.GenerateTemporaryCertificateCommand()
    command.setTemplateIdOrName("${mlSslCertTemplateName}")
    command.setCommonName("localhost")
    command.setValidFor(365)
    mlAppDeployer.commands.add(command)

    mlAppConfig.restSslContext = restSslContext
    mlAppConfig.restSslHostnameVerifier = restSslVerifier
    
    mlAppConfig {
//        customTokens.put("%%mlIngestRole%%", mlHubIngestRole)
    }
}

task importUsers(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    port = mlStagingPort.toInteger()
    username = mlHubIngestUser
    password = mlHubIngestPassword
    input_file_path = "data/"
    input_file_type = "documents"
    output_uri_replace = "data/,''"
    output_permissions = mlHubIngestRole + ",read," + mlHubIngestRole + ",update"
    output_uri_prefix = "/Users"
    output_collections = "User,RAW"
//    transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
//    transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
    transform_module = "/ext/data-hub-framework/transforms/mlcp-flow-transform.xqy"
    transform_namespace = "http://example.com/ext/data-hub-framework/transforms/mlcp-flow-transform"
    transform_param = 'entity-name=User,flow-name=ImportUsers,options={"dhf.key":"value","dhf.key2":"value2"}'
    temporal_collection = mlTemporalCollection
    args = ["-ssl", "-modules_root","/"]
}

task harmonizeUsers(type: com.marklogic.gradle.task.RunFlowTask) {
    doFirst {
        project.ext.entityName = "User"
        project.ext.flowName = "HarmonizeUsers"
        project.ext.flowType = "harmonize"
        project.ext.sourceDB = mlStagingDbName
        project.ext.destDB = mlFinalDbName
        project.ext.showOptions = "true"
        project.ext["dhf.key"]= "some value"
    }
}

import com.marklogic.client.DatabaseClientFactory
import com.marklogic.client.ext.helper.ClientHelper
import com.marklogic.client.ext.modulesloader.ssl.SimpleX509TrustManager

import javax.net.ssl.SSLContext
import javax.net.ssl.TrustManager

task clearFinalTemporalDocuments(type: com.marklogic.gradle.task.MarkLogicTask) {
    doLast {
        logger.info("Running clearTemporalDocuments Final")
        def xq = "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-admin-override\")) \n" +
                ";\n" +
                "xdmp:collection-delete(\"" + mlTemporalCollection + "\")\n" +
                ";\n" +
                "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-safe\"));"
        def sslContext = SimpleX509TrustManager.newSSLContext()
        def sslHostnameVerifier =  DatabaseClientFactory.SSLHostnameVerifier.ANY
        def context = new DatabaseClientFactory.DigestAuthContext(
                getAppConfig().getRestAdminUsername(),
                getAppConfig().getRestAdminPassword()
        ).withSSLContext(sslContext).withSSLHostnameVerifier(sslHostnameVerifier)
        def client = DatabaseClientFactory.newClient(
                getAppConfig().getHost(),
                getAppConfig().getAppServicesPort(),
                mlFinalDbName,
                context
        )
        def clientHelper = new ClientHelper(client)
        clientHelper.eval(xq)
        logger.info("Done clearTemporalDocuments Final")
    }
}


task clearStagingTemporalDocuments(type: com.marklogic.gradle.task.MarkLogicTask) {
    doLast {
        logger.info("Running clearTemporalDocuments Staging")
        def xq = "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-admin-override\")) \n" +
                ";\n" +
                "xdmp:collection-delete(\"" + mlTemporalCollection + "\")\n" +
                ";\n" +
                "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-safe\"));"
        def sslContext = SimpleX509TrustManager.newSSLContext()
        def sslHostnameVerifier =  DatabaseClientFactory.SSLHostnameVerifier.ANY
        def context = new DatabaseClientFactory.DigestAuthContext(
                getAppConfig().getRestAdminUsername(),
                getAppConfig().getRestAdminPassword()
        ).withSSLContext(sslContext).withSSLHostnameVerifier(sslHostnameVerifier)
        def client = DatabaseClientFactory.newClient(
                getAppConfig().getHost(),
                getAppConfig().getAppServicesPort(),
                mlStagingDbName,
                context
        )
        def clientHelper = new ClientHelper(client)
        clientHelper.eval(xq)
        logger.info("Done clearTemporalDocuments Staging")
    }
}

task setClearJobsDatabaseProperties {
    description = "Sets properties needed by mlClearDatabase to clear the jobs database"
    doLast {
        project.ext.confirm = "true"
        project.ext.database = mlJobsDbName
    }
}

