plugins {
    // This plugin allows you to create different environments
    // for your gradle deploy. Each environment is represented
    // by a gradle-${env}.properties file
    // See https://github.com/stevesaliman/gradle-properties-plugin
    // specify the env on the command line with:
    // gradle -PenvironmentName=x ...
    id 'net.saliman.properties' version '1.4.6'

    // This gradle plugin extends the ml-gradle plugin with
    // commands that make the Data Hub Framework do its magic
    id 'com.marklogic.ml-data-hub' version '4.0.1'
    id 'com.avast.gradle.docker-compose' version "0.6.11"
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    waitForTcpPorts = false
}

task mlDockerSetupNode(dependsOn:composeUp)  {
    doLast {
        sleep(5 * 1000) //ensure node is up
        exec {
            commandLine 'docker', 'exec', 'dhf4-server.local', 'init-marklogic'
        }
    }
}


task mlDockerDeploy(dependsOn:[mlDockerSetupNode])

task mlDockerStart(dependsOn:composeUp)

task mlDockerStop(type:Exec) {
    commandLine "docker-compose", "-f", 'docker-compose.yml', "stop"
}

task mlDockerTeardown(type: Delete, dependsOn:composeDown) {
    //remove logs directory
    delete 'logs'
}

ext {
    if (project.property("environmentName") == 'https') {
        def command = new com.marklogic.appdeployer.command.security.GenerateTemporaryCertificateCommand()
        command.setTemplateIdOrName(mlSslCertificateTemplate)
        command.setCommonName("localhost")
        command.setValidFor(365)
        mlAppDeployer.commands.add(command)        
    }
}
// Bugfix for DHF4 - see https://github.com/marklogic/marklogic-data-hub/pull/1416
ext {
    def loadModulesCommand = mlAppDeployer.getCommand("LoadModulesCommand")
    mlAppDeployer.getCommand("LoadHubModulesCommand").setExecuteSortOrder(loadModulesCommand.getExecuteSortOrder() - 1)
}

// Bugfix for DHF4
task deleteModuleTimestampsFile(type: Delete) {
    description = "Use this as mlDeleteModuleTimestampsFile doesn't seem to work with DHF4"
    delete "build/ml-javaclient-util/module-timestamps.properties"
}
mlReloadModules.dependsOn deleteModuleTimestampsFile
mlDeploy.dependsOn deleteModuleTimestampsFile

task testLoadModule {
    doLast {
        // See https://docs.marklogic.com/javadoc/client/com/marklogic/client/DatabaseClientFactory.html
        def host = mlHost
        def port = mlFinalPort.toInteger()
        def database = mlModulesDbName
        def username = mlUsername
        def password = mlPassword

        // See https://docs.marklogic.com/javadoc/client/com/marklogic/client/DatabaseClientFactory.SecurityContext.html
        def context = new com.marklogic.client.DatabaseClientFactory.DigestAuthContext(username, password)
        def client = com.marklogic.client.DatabaseClientFactory.newClient(host, port, database, context)
        try {
            client.newDocumentManager().write("/test/module2.xqy", new com.marklogic.client.io.StringHandle("<hello>world</hello>"))
        } finally {
            client.release()
        }
    }
}