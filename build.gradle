buildscript {
    repositories {
        maven {url 'http://distro.marklogic.com/nexus/repository/maven-releases/'}
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "com.marklogic:ml-data-hub:4.1.0-rc1"
    }
}

plugins {
    // This plugin allows you to create different environments
    // for your gradle deploy. Each environment is represented
    // by a gradle-${env}.properties file
    // See https://github.com/stevesaliman/gradle-properties-plugin
    // specify the env on the command line with:
    // gradle -PenvironmentName=x ...
    id 'net.saliman.properties' version '1.4.6'

}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/rjrudin/maven/" }
    maven { url "https://developer.marklogic.com/maven2/" }
}

configurations {
    mlcp {
        resolutionStrategy {
            force "xml-apis:xml-apis:1.4.01"
        }
    }
}

dependencies {
    mlcp "com.marklogic:mlcp:9.0.7"
    mlcp files("mlcp")
}

apply plugin: "com.marklogic.ml-data-hub"

/*
ext {
    if (project.property("environmentName") == 'https') {
        def command = new com.marklogic.appdeployer.command.security.GenerateTemporaryCertificateCommand()
        command.setTemplateIdOrName(mlSslCertificateTemplate)
        command.setCommonName("localhost")
        command.setValidFor(365)
        mlAppDeployer.commands.add(command)
    }
}
*/


task importUsers(type: com.marklogic.gradle.task.MlcpTask) {
    classpath = configurations.mlcp
    command = "IMPORT"
    port = mlStagingPort.toInteger()
    input_file_path = "data/"
    input_file_type = "documents"
    output_uri_replace = "data/,''"
    output_permissions = mlHubUserRole + ",read," + mlHubUserRole + ",update"
    output_uri_prefix = "/Users"
    output_collections = "User,RAW"
    transform_module = "/data-hub/4/transforms/mlcp-flow-transform.xqy"
    transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
//    transform_module = "/ext/data-hub-framework/transforms/mlcp-flow-transform.xqy"
//    transform_namespace = "http://example.com/ext/data-hub-framework/transforms/mlcp-flow-transform"
    transform_param = 'entity-name=User,flow-name=ImportUsers,options={"dhf.key":"value","dhf.key2":"value2"}'
    temporal_collection = mlTemporalCollection
    args = ["-ssl", "-modules_root","/"]
}

task harmonizeUsers(type: com.marklogic.gradle.task.RunFlowTask) {
    doFirst {
        project.ext.entityName = "User"
        project.ext.flowName = "HarmonizeUsers"
        project.ext.flowType = "harmonize"
        project.ext.sourceDB = mlStagingDbName
        project.ext.destDB = mlFinalDbName
        project.ext.showOptions = "true"
        project.ext["dhf.key"]= "some value"
    }
}

import com.marklogic.client.DatabaseClientFactory
import com.marklogic.client.ext.helper.ClientHelper
import com.marklogic.client.ext.modulesloader.ssl.SimpleX509TrustManager

task clearFinalTemporalDocuments(type: com.marklogic.gradle.task.MarkLogicTask) {
    doLast {
        logger.info("Running clearTemporalDocuments Final")
        def xq = "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-admin-override\")) \n" +
                ";\n" +
                "xdmp:collection-delete(\"Mine\")\n" +
                ";\n" +
                "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-safe\"));"
        def sslContext = SimpleX509TrustManager.newSSLContext()
        def sslHostnameVerifier =  DatabaseClientFactory.SSLHostnameVerifier.ANY
        def context = new DatabaseClientFactory.DigestAuthContext(
                getAppConfig().getRestAdminUsername(),
                getAppConfig().getRestAdminPassword()
        ).withSSLContext(sslContext).withSSLHostnameVerifier(sslHostnameVerifier)
        def client = DatabaseClientFactory.newClient(
                getAppConfig().getHost(),
                getAppConfig().getAppServicesPort(),
                mlFinalDbName,
                context
        )
        def clientHelper = new ClientHelper(client)
        clientHelper.eval(xq)
        logger.info("Done clearTemporalDocuments Final")
    }
}


task clearStagingTemporalDocuments(type: com.marklogic.gradle.task.MarkLogicTask) {
    doLast {
        logger.info("Running clearTemporalDocuments Staging")
        def xq = "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-admin-override\")) \n" +
                ";\n" +
                "xdmp:collection-delete(\"RAW\")\n" +
                ";\n" +
                "xquery version \"1.0-ml\"; \n" +
                " \n" +
                "import module namespace temporal = \"http://marklogic.com/xdmp/temporal\" \n" +
                "      at \"/MarkLogic/temporal.xqy\";\n" +
                "\n" +
                "temporal:collection-set-options(\""+ mlTemporalCollection + "\", (\"updates-safe\"));"
        def sslContext = SimpleX509TrustManager.newSSLContext()
        def sslHostnameVerifier =  DatabaseClientFactory.SSLHostnameVerifier.ANY
        def context = new DatabaseClientFactory.DigestAuthContext(
                getAppConfig().getRestAdminUsername(),
                getAppConfig().getRestAdminPassword()
        ).withSSLContext(sslContext).withSSLHostnameVerifier(sslHostnameVerifier)
        def client = DatabaseClientFactory.newClient(
                getAppConfig().getHost(),
                getAppConfig().getAppServicesPort(),
                mlStagingDbName,
                context
        )
        def clientHelper = new ClientHelper(client)
        clientHelper.eval(xq)
        logger.info("Done clearTemporalDocuments Staging")
    }
}

task setClearJobsDatabaseProperties {
    description = "Sets properties needed by mlClearDatabase to clear the jobs database"
    doLast {
        project.ext.confirm = "true"
        project.ext.database = mlJobsDbName
    }
}

